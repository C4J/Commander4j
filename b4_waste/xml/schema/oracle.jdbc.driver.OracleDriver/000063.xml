<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE DDL SYSTEM "schema.dtd">
<DDL>

<statement>
DROP VIEW view_qm_results
</statement>

<statement>
 CREATE VIEW view_qm_results AS (SELECT samp.PROCESS_ORDER as "PROCESS_ORDER",
       samp.MATERIAL as "MATERIAL",
       samp.SAMPLE_ID as "SAMPLE_ID",
       samp.INSPECTION_ID as "INSPECTION_ID",
       samp.ACTIVITY_ID as "ACTIVITY_ID",      
       samp.SAMPLE_DATE as "SAMPLE_DATE",
       samp.USER_DATA_1 as "USER_DATA_1",
       samp.USER_DATA_2 as "USER_DATA_2",
       result.TEST_ID as "TEST_ID",
       dict.DESCRIPTION as "TEST_DESCRIPTION",
       result.VALUE as "VALUE",
       COALESCE(valist.DESCRIPTION,result.VALUE) AS "RESULT"
FROM APP_QM_SAMPLE samp 
LEFT JOIN APP_QM_RESULT result ON (result.SAMPLE_ID = samp.SAMPLE_ID)
LEFT JOIN APP_QM_DICTIONARY dict ON (dict.TEST_ID = result.TEST_ID)
LEFT JOIN APP_QM_SELECTLIST valist ON (valist.SELECT_LIST_ID = dict.SELECT_LIST_ID AND valist.VALUE = result.VALUE))
</statement>

<statement>
create or replace 
FUNCTION C4J_GETYEAR (XDATE IN DATE,XSIZE IN INT) RETURN VARCHAR2 AS
  result varchar2(8);
  dom    int;
BEGIN
  result :=CONCAT('0000',to_char(XDATE, 'yyyy'));
  result := substr(result,LENGTH(result)+(-1*XSIZE)+1,XSIZE);
  RETURN result;
END C4J_GETYEAR;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETCONTROLVALUE 
(
  XNAME IN VARCHAR2  
) RETURN VARCHAR2 AS 
    result varchar2(50);
BEGIN
  
  SELECT KEY_VALUE INTO result FROM SYS_CONTROL where SYSTEM_KEY = XNAME;

  RETURN result;
END C4J_GETCONTROLVALUE;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETPLANT RETURN VARCHAR2 AS
  result varchar2(50);
BEGIN
  result := C4J_GetControlValue('PLANT');
  RETURN result;
END C4J_GETPLANT;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETMONTH (XDATE IN DATE) RETURN VARCHAR2 AS
  result varchar2(4);
  dom    int;
BEGIN
  result :=CONCAT('00',to_char(XDATE, 'mm'));
  result := substr(result,LENGTH(result)-1,2);
  RETURN result;
END C4J_GETMONTH;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETBASEQUANTITY (XMATERIAL IN VARCHAR2, XPRODUCTION_QUANTITY IN NUMBER, XPRODUCTION_UOM IN VARCHAR2) RETURN decimal AS
    xbase_uom varchar2(3);
    xbase_quantity decimal(22,3);
BEGIN
    SELECT base_uom INTO xbase_uom FROM APP_MATERIAL WHERE MATERIAL = XMATERIAL;
    SELECT(XPRODUCTION_QUANTITY * NUMERATOR / DENOMINATOR) into xbase_quantity FROM APP_MATERIAL_UOM WHERE MATERIAL = XMATERIAL AND UOM = XPRODUCTION_UOM;
  RETURN xbase_quantity;
END C4J_GETBASEQUANTITY;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETDAY (XDATE IN DATE) RETURN VARCHAR2 AS
  result varchar2(4);
  dom    int;
BEGIN
  result :=CONCAT('00',to_char(XDATE, 'dd'));
  result := substr(result,LENGTH(result)-1,2);
  RETURN result;
END C4J_GETDAY;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETEXPIRYDATE (XPRODUCTION_DATE IN DATE, XSHELF_LIFE IN INT, XSHELF_LIFE_UOM IN VARCHAR2, XSHELF_LIFE_ROUNDING IN VARCHAR2)  RETURN DATE AS 
  result date;
BEGIN
  result := XPRODUCTION_DATE;

  IF (XSHELF_LIFE_UOM = 'D') THEN
      result := result + XSHELF_LIFE;
  END IF;
  
  IF (XSHELF_LIFE_UOM = 'M') THEN
      result := ADD_MONTHS( result, XSHELF_LIFE );
  END IF;
  
  IF (XSHELF_LIFE_UOM = 'Y') THEN
      result := ADD_MONTHS( result, (XSHELF_LIFE*12) );
  END IF;
  
  IF XSHELF_LIFE_ROUNDING = '+' THEN
			result := LAST_DAY(result);
  END IF;

  IF XSHELF_LIFE_ROUNDING = '-' THEN
			result := trunc(result,'MM');
  END IF;

  RETURN result;
END C4J_GETEXPIRYDATE;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETFINALBATCHNUMBER 
(
  XPRODUCTION_DATE IN DATE  
, XOVERRIDE_BATCH IN VARCHAR2  
, XOVERRIDE_BATCH_NUMBER IN VARCHAR2  
, XBATCH_OPTIONAL IN VARCHAR2  
) RETURN VARCHAR2 AS 
  result        varchar2(40);
  batchformat   varchar2(50);
BEGIN

	IF (XOVERRIDE_BATCH = 'Y') THEN
      result := XOVERRIDE_BATCH_NUMBER;
	END IF;

	IF XOVERRIDE_BATCH = 'N' THEN
			batchformat := c4j_GetControlValue('BATCH FORMAT');
			result := batchformat;
			result := REPLACE(result,'{PLANT}',c4j_GetPlant());
			result := REPLACE(result,'{YEAR4}',c4j_GetYear(XPRODUCTION_DATE,4));
			result := REPLACE(result,'{YEAR2}',c4j_GetYear(XPRODUCTION_DATE,2));
			result := REPLACE(result,'{YEAR1}',c4j_GetYear(XPRODUCTION_DATE,1));
			result := REPLACE(result,'{MONTH}',c4j_GetMonth(XPRODUCTION_DATE));
			result := REPLACE(result,'{DAY}',c4j_GetDay(XPRODUCTION_DATE));
			result := REPLACE(result,'{JULIAN_DAY}',c4j_GetJulian(XPRODUCTION_DATE,1));
			result := REPLACE(result,'{JULIAN0_DAY}',c4j_GetJulian(XPRODUCTION_DATE,0));
			result := REPLACE(result,'{JULIAN1_DAY}',c4j_GetJulian(XPRODUCTION_DATE,1));
	END IF;

	result := CONCAT(result,XBATCH_OPTIONAL);

  RETURN result;
END C4J_GETFINALBATCHNUMBER;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETFINALEXPIRYDATE 
(
  XPRODUCTION_DATE IN DATE  
, XSHELF_LIFE IN INT  
, XSHELF_LIFE_UOM IN VARCHAR2  
, XSHELF_LIFE_ROUNDING IN VARCHAR2  
, XOVERRIDE_EXPIRY IN VARCHAR2  
, XOVERRIDE_EXPIRY_DATE IN DATE  
) RETURN DATE AS 
  result DATE;
BEGIN

  IF (XOVERRIDE_EXPIRY = 'Y') THEN
    result := XOVERRIDE_EXPIRY_DATE;
  END IF;
  
  IF (XOVERRIDE_EXPIRY = 'N') THEN
    result := C4J_GETEXPIRYDATE(XPRODUCTION_DATE,XSHELF_LIFE,XSHELF_LIFE_UOM,XSHELF_LIFE_ROUNDING);
  END IF; 

  RETURN result;
END C4J_GETFINALEXPIRYDATE;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETFULLPALLETQUANTITY (XPROCESS_ORDER IN VARCHAR2) RETURN DECIMAL AS 
  result                decimal(22,3);
  xmaterial             varchar2(40);
  xpal_uom              varchar2(3);
  xpal_numerator        decimal(22,3);
  xpal_denominator      decimal(22,3);
  xrequired_uom         varchar2(3);
  xrequired_denominator decimal(22,3);
  xrequired_numerator   decimal(22,3);
BEGIN       

  xpal_uom := c4j_GetControlValue('UOM FULL PALLET QTY');

  SELECT REQUIRED_UOM into xrequired_uom FROM APP_PROCESS_ORDER WHERE PROCESS_ORDER = XPROCESS_ORDER;
  SELECT MATERIAL into xmaterial FROM APP_PROCESS_ORDER WHERE PROCESS_ORDER = XPROCESS_ORDER;

  SELECT DENOMINATOR into xrequired_denominator FROM APP_MATERIAL_UOM WHERE MATERIAL = xmaterial and UOM = xrequired_uom;
  SELECT NUMERATOR into xrequired_numerator FROM APP_MATERIAL_UOM WHERE MATERIAL = xmaterial and UOM = xrequired_uom;
  
  SELECT DENOMINATOR into xpal_denominator FROM APP_MATERIAL_UOM WHERE MATERIAL = xmaterial and UOM = xpal_uom;
  SELECT NUMERATOR into xpal_numerator FROM APP_MATERIAL_UOM WHERE MATERIAL = xmaterial and UOM = xpal_uom;
  
  result := (xpal_numerator/xpal_denominator) * (xrequired_denominator/xrequired_numerator);
  
  RETURN result;
END C4J_GETFULLPALLETQUANTITY;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETJULIAN 
(
  XDATE IN DATE,XOFFSET int  
) RETURN VARCHAR2 AS 
  result varchar2(9);
  firstDayofYear    date;
  firstJulianofYear int;
BEGIN

  firstDayofYear := TRUNC(XDATE,'YEAR');
  firstJulianofYear := TO_CHAR(firstDayofYear, 'J');
  result := TO_CHAR(XDATE, 'J') -firstJulianofYear+XOFFSET ;
  result := CONCAT('00',result);
  result := substr(result,LENGTH(result)-1,2);
  
  RETURN result;
END C4J_GETJULIAN;
</statement>

<statement>
create or replace 
FUNCTION C4J_GETLAYERS ( XPROCESS_ORDER IN VARCHAR2) RETURN INT AS 
  result                INT;
  xlayers_uom           varchar2(3);
  xpallet_uom           varchar2(3);
  xbase_quantity        decimal(22,3);
  xmaterial             varchar2(20);
  xproduction_uom       varchar2(3);
  xproduction_quantity  decimal(22,3);
BEGIN

  xproduction_quantity := c4j_GetFullPalletQuantity(XPROCESS_ORDER);
  SELECT MATERIAL into xmaterial from APP_PROCESS_ORDER WHERE PROCESS_ORDER = XPROCESS_ORDER;
  SELECT REQUIRED_UOM into xproduction_uom from APP_PROCESS_ORDER WHERE PROCESS_ORDER = XPROCESS_ORDER;
  xbase_quantity := c4j_GetBaseQuantity(xmaterial,xproduction_quantity,xproduction_uom);
  xlayers_uom := c4j_GetControlValue('UOM BASE QTY PER LAYER');
  SELECT (xbase_quantity / NUMERATOR * DENOMINATOR) into result FROM APP_MATERIAL_UOM WHERE MATERIAL = xmaterial AND UOM = xlayers_uom;

  result := CEIL(result);
  result := COALESCE(result,1);
  
  IF (result = 0) THEN
       result := 1;
  END IF;
  
  RETURN result;
END C4J_GETLAYERS;
</statement>

<statement>
 CREATE OR REPLACE VIEW view_auto_labeller AS 
  select 
        AL.LINE AS LINE,
        AL.PROCESS_ORDER AS PROCESS_ORDER,
        PO.STATUS AS STATUS,
        PO.MATERIAL AS MATERIAL,
        PO.REQUIRED_UOM AS REQUIRED_UOM,
        MAT.MATERIAL_TYPE AS MATERIAL_TYPE,
        MAT.DESCRIPTION AS DESCRIPTION,
        LPAD( MATUOM.EAN,14,'0') AS EAN,
        LPAD(MATUOM.VARIANT,2,'0') AS VARIANT,
        MAT.OLD_MATERIAL AS OLD_MATERIAL,
        MAT.SHELF_LIFE AS SHELF_LIFE,
        MAT.SHELF_LIFE_UOM AS SHELF_LIFE_UOM,
        MAT.SHELF_LIFE_RULE AS SHELF_LIFE_RULE,
        PO.CUSTOMER_ID AS CUSTOMER_ID,
        CUST.CUSTOMER_NAME AS CUSTOMER_NAME,
        SUBSTR(C4J_GETFINALBATCHNUMBER(sysdate,AL.OVERRIDE_BATCH,AL.OVERRIDE_BATCH_NUMBER,AL.BATCH_OPTIONAL),1,12) AS BATCH_NUMBER,
        c4j_GetFinalExpiryDate(sysdate,MAT.SHELF_LIFE,MAT.SHELF_LIFE_UOM,MAT.SHELF_LIFE_RULE,AL.OVERRIDE_EXPIRY,AL.OVERRIDE_EXPIRY_DATE) AS EXPIRY_DATE,
        c4j_GetLayers(PO.PROCESS_ORDER) AS DEFAULT_LAYERS,
        c4j_GetFullPalletQuantity(PO.PROCESS_ORDER) AS DEFAULT_QUANTITY 
    from
        APP_AUTO_LABELLER AL,
        APP_PROCESS_ORDER PO,
        APP_MATERIAL MAT,
        APP_CUSTOMER CUST,
        APP_MATERIAL_UOM MATUOM
    where
        PO.PROCESS_ORDER = AL.PROCESS_ORDER
        and (MAT.MATERIAL = PO.MATERIAL)
        and (CUST.CUSTOMER_ID = PO.CUSTOMER_ID)
        and (MATUOM.MATERIAL = PO.MATERIAL)
       and (MATUOM.UOM = PO.REQUIRED_UOM)
</statement>

<statement>
 CREATE OR REPLACE VIEW view_auto_labeller_full  AS 
  select 
        po.PROCESS_ORDER AS PROCESS_ORDER,
        PO.STATUS AS STATUS,
        PO.MATERIAL AS MATERIAL,
        PO.REQUIRED_UOM AS REQUIRED_UOM,
        MAT.MATERIAL_TYPE AS MATERIAL_TYPE,
        MAT.DESCRIPTION AS DESCRIPTION,
        LPAD( MATUOM.EAN,14,'0') AS EAN,
        LPAD(MATUOM.VARIANT,2,'0') AS VARIANT,
        MAT.OLD_MATERIAL AS OLD_MATERIAL,
        MAT.SHELF_LIFE AS SHELF_LIFE,
        MAT.SHELF_LIFE_UOM AS SHELF_LIFE_UOM,
        MAT.SHELF_LIFE_RULE AS SHELF_LIFE_RULE,
        PO.CUSTOMER_ID AS CUSTOMER_ID,
        CUST.CUSTOMER_NAME AS CUSTOMER_NAME,
        SUBSTR(C4J_GETFINALBATCHNUMBER(sysdate,'N','',''),1,12) AS BATCH_NUMBER,
        c4j_GetFinalExpiryDate(sysdate,MAT.SHELF_LIFE,MAT.SHELF_LIFE_UOM,MAT.SHELF_LIFE_RULE,'',SYSDATE) AS EXPIRY_DATE,
        c4j_GetLayers(PO.PROCESS_ORDER) AS DEFAULT_LAYERS,
        c4j_GetFullPalletQuantity(PO.PROCESS_ORDER) AS DEFAULT_QUANTITY 
    from
        APP_PROCESS_ORDER PO,
        APP_MATERIAL MAT,
        APP_CUSTOMER CUST,
        APP_MATERIAL_UOM MATUOM
    where
        MAT.MATERIAL = PO.MATERIAL
        and (CUST.CUSTOMER_ID = PO.CUSTOMER_ID)
        and (MATUOM.MATERIAL = PO.MATERIAL)
       and (MATUOM.UOM = PO.REQUIRED_UOM)
</statement>

<statement>
ALTER TABLE APP_AUTO_LABELLER ADD ("SSCC_SEQUENCE" NUMBER(18)  DEFAULT 0)
</statement>

<statement>
	INSERT INTO SYS_MODULES (MODULE_ID, RF_ACTIVE, DK_ACTIVE, MODULE_TYPE, HINT, ICON_FILENAME, HELPSET_ID, REPORT_FILENAME, EXEC_FILENAME, EXEC_DIR, PRINT_PREVIEW, PRINT_DIALOG, PRINT_COPIES, REPORT_TYPE, resource_key) VALUES ('FRM_ADMIN_AUTO_LAB_ADD', 'N', 'Y', 'FUNCTION', '', '', '', '', '', '', 'Y', 'Y', 1, '', '')
</statement>

<statement>
	INSERT INTO SYS_MODULES (MODULE_ID, RF_ACTIVE, DK_ACTIVE, MODULE_TYPE, HINT, ICON_FILENAME, HELPSET_ID, REPORT_FILENAME, EXEC_FILENAME, EXEC_DIR, PRINT_PREVIEW, PRINT_DIALOG, PRINT_COPIES, REPORT_TYPE, resource_key) VALUES ('FRM_ADMIN_AUTO_LAB_EDIT', 'N', 'Y', 'FUNCTION', '', '', '', '', '', '', 'Y', 'Y', 1, '', 'mod_FRM_ADMIN_AUTO_LAB_EDIT')
</statement>

<statement>
	INSERT INTO SYS_MODULES (MODULE_ID, RF_ACTIVE, DK_ACTIVE, MODULE_TYPE, HINT, ICON_FILENAME, HELPSET_ID, REPORT_FILENAME, EXEC_FILENAME, EXEC_DIR, PRINT_PREVIEW, PRINT_DIALOG, PRINT_COPIES, REPORT_TYPE, resource_key) VALUES ('FRM_ADMIN_AUTO_LAB_DELETE', 'N', 'Y', 'FUNCTION', '', '', '', '', '', '', 'Y', 'Y', 1, '', '')
</statement>

<statement>
	INSERT INTO SYS_GROUP_PERMISSIONS (GROUP_ID, MODULE_ID) VALUES ('ADMIN', 'FRM_ADMIN_AUTO_LAB_ADD')
</statement>

<statement>
	INSERT INTO SYS_GROUP_PERMISSIONS (GROUP_ID, MODULE_ID) VALUES ('ADMIN', 'FRM_ADMIN_AUTO_LAB_EDIT')
</statement>

<statement>
	INSERT INTO SYS_GROUP_PERMISSIONS (GROUP_ID, MODULE_ID) VALUES ('ADMIN', 'FRM_ADMIN_AUTO_LAB_DELETE')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_Line_ID', 'EN', 'Line ID', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_Line_ID', 'NL', 'Line ID', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_Line_ID', 'HU', 'Line ID', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_Line_ID', 'IT', 'Line ID', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_SSCC_Sequence', 'EN', 'SSCC Sequence', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_SSCC_Sequence', 'NL', 'SSCC Sequence', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_SSCC_Sequence', 'HU', 'SSCC Sequence', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_SSCC_Sequence', 'IT', 'SSCC Sequence', '')
</statement>

<statement>
insert into SYS_LANGUAGE (resource_key,language_id,text,mnemonic) values ('mod_FRM_ADMIN_AUTO_LAB_EDIT','EN','Add or Update a Production Line','')
</statement>

<statement>
insert into SYS_LANGUAGE (resource_key,language_id,text,mnemonic) values ('mod_FRM_ADMIN_AUTO_LAB_EDIT','NL','Add or Update a Production Line','')
</statement>

<statement>
insert into SYS_LANGUAGE (resource_key,language_id,text,mnemonic) values ('mod_FRM_ADMIN_AUTO_LAB_EDIT','HU','Add or Update a Production Line','')
</statement>

<statement>
insert into SYS_LANGUAGE (resource_key,language_id,text,mnemonic) values ('mod_FRM_ADMIN_AUTO_LAB_EDIT','IT','Add or Update a Production Line','')
</statement>

</DDL>