<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE DDL SYSTEM "schema.dtd">
<DDL>

<statement>
	DROP VIEW view_qm_results
</statement>

<statement>
CREATE VIEW view_qm_results AS SELECT samp.PROCESS_ORDER as 'PROCESS_ORDER',
       samp.MATERIAL as 'MATERIAL',
       samp.SAMPLE_ID as 'SAMPLE_ID',
       samp.INSPECTION_ID as 'INSPECTION_ID',
       samp.ACTIVITY_ID as 'ACTIVITY_ID',
       samp.SAMPLE_DATE as 'SAMPLE_DATE',
       samp.USER_DATA_1 as 'USER_DATA_1',
       samp.USER_DATA_2 as 'USER_DATA_2',
       result.TEST_ID as 'TEST_ID',
       dict.DESCRIPTION as 'TEST_DESCRIPTION',
       result.VALUE as 'VALUE',
       COALESCE(valist.DESCRIPTION,result.VALUE) AS 'RESULT'
FROM APP_QM_SAMPLE samp 
LEFT JOIN APP_QM_RESULT result ON (result.SAMPLE_ID = samp.SAMPLE_ID)
LEFT JOIN APP_QM_DICTIONARY dict ON (dict.TEST_ID = result.TEST_ID)
LEFT JOIN APP_QM_SELECTLIST valist ON (valist.SELECT_LIST_ID = dict.SELECT_LIST_ID AND valist.VALUE = result.VALUE)
</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetYear]
(
	@XDATE datetime,
	@SIZE int
)

RETURNS varchar(10)
AS
BEGIN

DECLARE	@Year			int,
		@Result         varchar(10);
		
		SET @Year = YEAR(@XDATE);
		SET @Result =right('0000' + replace(cast(@Year as varchar(4)), SPACE(1),'0'),@SIZE)

		RETURN @Result;
END
</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetControlValue]
(
	@xname				varchar(50)
)

RETURNS varchar(50)
AS
BEGIN

DECLARE @result			varchar(50)
		
		SELECT @result = KEY_VALUE FROM SYS_CONTROL WHERE SYSTEM_KEY = @xname
		
		RETURN @result
END
</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetPlant]
(
)

RETURNS varchar(10)
AS
BEGIN

DECLARE	@Result			varchar(10)
		
		SELECT @Result = KEY_VALUE FROM SYS_CONTROL WHERE SYSTEM_KEY = 'PLANT';
		
		RETURN @Result
END

</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetMonth]
(
	@xdate datetime
)

RETURNS varchar(2)
AS
BEGIN

DECLARE	@Month			int,
		@Result         varchar(2);
		
		SET @Month = MONTH(@xdate);
		SET @Result =right('00' + replace(cast(@Month as varchar(2)), SPACE(1),'0'),2)

		RETURN @Result;
END
</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetBaseQuantity]
(
	@Material			 varchar(20),
	@Production_Quantity numeric(22,3),
	@Production_UOM		 varchar(3)
)

RETURNS numeric(22,3)
AS
BEGIN

DECLARE @Base_UOM		varchar(3),
		@Base_Quantity	numeric(22,3)
		
		SELECT @Base_UOM = BASE_UOM FROM APP_MATERIAL WHERE MATERIAL = @Material
		SELECT @Base_Quantity = (@Production_Quantity * NUMERATOR / DENOMINATOR) FROM APP_MATERIAL_UOM WHERE MATERIAL = @Material AND UOM = @Production_UOM
		
		RETURN @Base_Quantity
END
</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetDay]
(
	@xdate datetime
)

RETURNS varchar(2)
AS
BEGIN

DECLARE	@Day			int,
		@Result         varchar(2);
		
		SET @Day = DAY(@xdate);
		SET @Result =right('00' + replace(cast(@Day as varchar(2)), SPACE(1),'0'),2)

		RETURN @Result;
END
</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetExpiryDate]
(
	@ProductionDate      datetime,
	@ShelfLife			 int,
	@ShelfUOM            varchar(1),
	@ShelfRounding    	 varchar(1)
)

RETURNS datetime
AS
BEGIN

DECLARE @ExpiryDate		datetime
		
		SET @ExpiryDate =@ProductionDate;


		IF @ShelfUOM = 'D'
		BEGIN
			SET @ExpiryDate =  DATEADD(day,@ShelfLife,@ExpiryDate);
		END

		IF @ShelfUOM = 'M'
		BEGIN
			SET @ExpiryDate =  DATEADD(month,@ShelfLife,@ExpiryDate);
		END

		IF @ShelfUOM = 'Y'
		BEGIN
			SET @ExpiryDate =  DATEADD(year,@ShelfLife,@ExpiryDate);
		END
			
		IF @ShelfRounding = '+'
		BEGIN
			SET @ExpiryDate =  DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@ExpiryDate)+1,0))
		END

		IF @ShelfRounding = '-'
		BEGIN
			SET @ExpiryDate = DATEADD(dd,-(DAY(@ExpiryDate)-1),@ExpiryDate);
		END
		
		SET @ExpiryDate = cast(floor(cast(@ExpiryDate as float)) as datetime);

		RETURN @ExpiryDate
END
</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetFinalBatchNumber]
(
	@ProductionDate			datetime,
	@OverrideBatch			varchar(1),
	@OverrideBatchNumber	varchar(40),
    @BatchOptional       	varchar(40)
)

RETURNS varchar(100)
AS
BEGIN

DECLARE
		@Result         varchar(100),
		@BatchFormat    varchar(100)

		if @OverrideBatch = 'Y'
		BEGIN
			SET @Result = @OverrideBatchNumber;
		END


		if @OverrideBatch = 'N'
		BEGIN
			SET @BatchFormat = dbo.c4j_GetControlValue('BATCH FORMAT');
			SET @Result = @BatchFormat;
			SET @Result = REPLACE(@Result,'{PLANT}',dbo.c4j_GetPlant());
			SET @Result = REPLACE(@Result,'{YEAR4}',dbo.c4j_GetYear(@ProductionDate,4));
			SET @Result = REPLACE(@Result,'{YEAR2}',dbo.c4j_GetYear(@ProductionDate,2));
			SET @Result = REPLACE(@Result,'{YEAR1}',dbo.c4j_GetYear(@ProductionDate,1));
			SET @Result = REPLACE(@Result,'{MONTH}',dbo.c4j_GetMonth(@ProductionDate));
			SET @Result = REPLACE(@Result,'{DAY}',dbo.c4j_GetDay(@ProductionDate));
			SET @Result = REPLACE(@Result,'{JULIAN_DAY}',dbo.c4j_GetJulian(@ProductionDate,1));
			SET @Result = REPLACE(@Result,'{JULIAN0_DAY}',dbo.c4j_GetJulian(@ProductionDate,0));
			SET @Result = REPLACE(@Result,'{JULIAN1_DAY}',dbo.c4j_GetJulian(@ProductionDate,1));
		END
		
		SET @Result = @Result + @BatchOptional;

		RETURN	@Result
END
</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetFinalExpiryDate]
(
	@ProductionDate      datetime,
	@ShelfLife           int,
	@ShelfLifeUOM        varchar(1),
	@ShelfLifeRounding   varchar(1),
	@OverrideExpiry		 varchar(1),
	@OverrideExpiryDate	 datetime
)

RETURNS datetime
AS
BEGIN

DECLARE
		@Result         datetime

		if @OverrideExpiry = 'Y'
		BEGIN
			SET @Result = @OverrideExpiryDate;
		END


		if @OverrideExpiry = 'N'
		BEGIN
			SET @Result = dbo.c4j_GetExpiryDate(@ProductionDate,@ShelfLife,@ShelfLifeUOM,@ShelfLifeRounding);
		END
		
		RETURN	@Result
END
</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetFullPalletQuantity]
(
	@Process_Order		 varchar(40)
)

RETURNS integer
AS
BEGIN

DECLARE @result					numeric(22,3),
		
		@Material				varchar(40),
		
		@PAL_UOM				varchar(3),
		@PAL_Numerator			numeric(22,3),
		@PAL_Denominator		numeric(22,3),
		
		@Required_UOM			varchar(3),
		@Required_Denominator	numeric(22,3),
		@Required_Numerator		numeric(22,3)
			
		SET @PAL_UOM = dbo.c4j_GetControlValue('UOM FULL PALLET QTY');

		SELECT @Required_UOM = REQUIRED_UOM,@Material = MATERIAL FROM APP_PROCESS_ORDER WHERE PROCESS_ORDER = @Process_Order
	
		SELECT @Required_Denominator=DENOMINATOR,@Required_Numerator=NUMERATOR FROM APP_MATERIAL_UOM WHERE MATERIAL = @Material AND UOM = @Required_UOM
		SELECT @PAL_Denominator=DENOMINATOR,@PAL_Numerator=NUMERATOR FROM APP_MATERIAL_UOM WHERE MATERIAL = @Material AND UOM = @PAL_UOM		

		SET @result = (@PAL_Numerator/@PAL_Denominator) * (@Required_Denominator/@Required_Numerator)
		
		RETURN	@result
END
</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetJulian]
(
	@XDATE		datetime,
	@XOFFSET	int
)

RETURNS varchar(6)
AS
BEGIN

DECLARE @JanFirst		datetime,
		@CurrentDate	datetime,
		@DaysBetween    int,
		@Result			varchar(10)
		
		SET @JanFirst = DATEADD(month,0,DATEADD(year,Year(GetDate())-1900,0))
		SET @CurrentDate = cast(floor(cast(GetDate() as float)) as datetime);
		SET @DaysBetween = DATEDIFF(day,@JanFirst,@CurrentDate) + @XOFFSET;
		SET @Result =  right('000' + replace(cast(@DaysBetween as varchar(10)), SPACE(1),'0'),3)

		RETURN @Result
END

</statement>

<statement>
CREATE  FUNCTION [dbo].[c4j_GetLayers]
(
	@xprocess_order		varchar(20)
)

RETURNS integer
AS
BEGIN

DECLARE @result						int,
		@xlayers_uom				varchar(3),
		@xpallet_uom				varchar(3),
		@xbase_quantity				numeric(22,3),
		@xmaterial					varchar(20),
		@xproduction_quantity		numeric(22,3),
		@xproduction_uom			varchar(3)
		
		SET @xproduction_quantity = dbo.c4j_GetFullPalletQuantity(@xprocess_order);
		SELECT @xmaterial = MATERIAL FROM APP_PROCESS_ORDER WHERE PROCESS_ORDER = @xprocess_order;
		SELECT @xproduction_uom = REQUIRED_UOM FROM APP_PROCESS_ORDER WHERE PROCESS_ORDER = @xprocess_order;
		SET @xbase_quantity = dbo.c4j_GetBaseQuantity(@xmaterial,@xproduction_quantity,@xproduction_uom)
		
		SET @xlayers_uom = dbo.c4j_GetControlValue('UOM BASE QTY PER LAYER');

		SELECT @result = (@xbase_quantity / NUMERATOR * DENOMINATOR)  FROM APP_MATERIAL_UOM WHERE MATERIAL = @xmaterial AND UOM = @xlayers_uom
		
		SET @result = CEILING(@result)
		SET @result = coalesce(@result, 1)
		
		IF @result = 0 SET @result = 1

		RETURN	@result
END
</statement>

<statement>
CREATE VIEW [dbo].[view_auto_labeller] AS 
SELECT AL.LINE,
       AL.PROCESS_ORDER,
	   PO.STATUS,
	   PO.MATERIAL,
	   PO.REQUIRED_UOM,
	   MAT.MATERIAL_TYPE,
	   MAT.DESCRIPTION,
	   RIGHT('00000000000000'+MATUOM.EAN,14) AS EAN, 
	   RIGHT('00'+MATUOM.VARIANT,2) AS VARIANT,
	   MAT.OLD_MATERIAL,
	   MAT.SHELF_LIFE, 
	   MAT.SHELF_LIFE_UOM, 
	   MAT.SHELF_LIFE_RULE, 
	   PO.CUSTOMER_ID,
	   CUST.CUSTOMER_NAME,
	   MAT.UPDATED AS MATERIAL_UPDATED,
	   PO.UPDATED AS PROCESS_ORDER_UPDATED,
	   dbo.c4j_GetFinalBatchNumber(GETDATE(),OVERRIDE_BATCH,OVERRIDE_BATCH_NUMBER,BATCH_OPTIONAL) AS BATCH_NUMBER,
	   dbo.c4j_GetFinalExpiryDate(GETDATE(),MAT.SHELF_LIFE,MAT.SHELF_LIFE_UOM,MAT.SHELF_LIFE_RULE,AL.OVERRIDE_EXPIRY,AL.OVERRIDE_EXPIRY_DATE) AS EXPIRY_DATE,
	   dbo.c4j_GetLayers(AL.PROCESS_ORDER) AS DEFAULT_LAYERS,
	   dbo.c4j_GetFullPalletQuantity(PO.PROCESS_ORDER) AS DEFAULT_QUANTITY
	   FROM APP_AUTO_LABELLER AL, 
	        APP_PROCESS_ORDER PO,
			APP_MATERIAL MAT,
			APP_CUSTOMER CUST,
			APP_MATERIAL_UOM MATUOM
	   WHERE PO.PROCESS_ORDER = AL.PROCESS_ORDER 
	   AND MAT.MATERIAL = PO.MATERIAL 
	   AND CUST.CUSTOMER_ID = PO.CUSTOMER_ID
	   AND MATUOM.MATERIAL = PO.MATERIAL AND MATUOM.UOM=PO.REQUIRED_UOM

</statement>

<statement>
CREATE VIEW [dbo].[view_auto_labeller_full] AS 
SELECT PO.PROCESS_ORDER,
	   PO.STATUS,
	   PO.MATERIAL,
	   PO.REQUIRED_UOM,
	   MAT.MATERIAL_TYPE,
	   MAT.DESCRIPTION,
	   RIGHT('00000000000000'+MATUOM.EAN,14) AS EAN, 
	   RIGHT('00'+MATUOM.VARIANT,2) AS VARIANT,
	   MAT.OLD_MATERIAL,
	   MAT.SHELF_LIFE, 
	   MAT.SHELF_LIFE_UOM, 
	   MAT.SHELF_LIFE_RULE, 
	   PO.CUSTOMER_ID,
	   CUST.CUSTOMER_NAME,
	   MAT.UPDATED AS MATERIAL_UPDATED,
	   PO.UPDATED AS PROCESS_ORDER_UPDATED,
	   dbo.c4j_GetFinalBatchNumber(GETDATE(),'N','','') AS BATCH_NUMBER,
	   dbo.c4j_GetFinalExpiryDate(GETDATE(),MAT.SHELF_LIFE,MAT.SHELF_LIFE_UOM,MAT.SHELF_LIFE_RULE,'N',GETDATE()) AS EXPIRY_DATE,
	   dbo.c4j_GetLayers(PO.PROCESS_ORDER) AS DEFAULT_LAYERS,
	   dbo.c4j_GetFullPalletQuantity(PO.PROCESS_ORDER) AS DEFAULT_QUANTITY
	   FROM APP_PROCESS_ORDER PO,
			APP_MATERIAL MAT,
			APP_CUSTOMER CUST,
			APP_MATERIAL_UOM MATUOM
	   WHERE MAT.MATERIAL = PO.MATERIAL 
	   AND CUST.CUSTOMER_ID = PO.CUSTOMER_ID
	   AND MATUOM.MATERIAL = PO.MATERIAL AND MATUOM.UOM=PO.REQUIRED_UOM
</statement>

<statement>
	ALTER TABLE APP_AUTO_LABELLER ADD SSCC_SEQUENCE NUMERIC(18) NULL DEFAULT 0
</statement>

<statement>
	INSERT INTO [dbo].[SYS_MODULES] ([MODULE_ID], [RF_ACTIVE], [DK_ACTIVE], [MODULE_TYPE], [HINT], [ICON_FILENAME], [HELPSET_ID], [REPORT_FILENAME], [EXEC_FILENAME], [EXEC_DIR], [PRINT_PREVIEW], [PRINT_DIALOG], [PRINT_COPIES], [REPORT_TYPE], [resource_key]) VALUES ('FRM_ADMIN_AUTO_LAB_ADD', 'N', 'Y', 'FUNCTION', '', '', '', '', '', '', 'Y', 'Y', 1, '', '')
</statement>

<statement>
	INSERT INTO [dbo].[SYS_MODULES] ([MODULE_ID], [RF_ACTIVE], [DK_ACTIVE], [MODULE_TYPE], [HINT], [ICON_FILENAME], [HELPSET_ID], [REPORT_FILENAME], [EXEC_FILENAME], [EXEC_DIR], [PRINT_PREVIEW], [PRINT_DIALOG], [PRINT_COPIES], [REPORT_TYPE], [resource_key]) VALUES ('FRM_ADMIN_AUTO_LAB_EDIT', 'N', 'Y', 'FUNCTION', '', '', '', '', '', '', 'Y', 'Y', 1, '', 'mod_FRM_ADMIN_AUTO_LAB_EDIT')
</statement>

<statement>
	INSERT INTO [dbo].[SYS_MODULES] ([MODULE_ID], [RF_ACTIVE], [DK_ACTIVE], [MODULE_TYPE], [HINT], [ICON_FILENAME], [HELPSET_ID], [REPORT_FILENAME], [EXEC_FILENAME], [EXEC_DIR], [PRINT_PREVIEW], [PRINT_DIALOG], [PRINT_COPIES], [REPORT_TYPE], [resource_key]) VALUES ('FRM_ADMIN_AUTO_LAB_DELETE', 'N', 'Y', 'FUNCTION', '', '', '', '', '', '', 'Y', 'Y', 1, '', '')
</statement>

<statement>
	INSERT INTO [dbo].[SYS_GROUP_PERMISSIONS] ([GROUP_ID], [MODULE_ID]) VALUES ('ADMIN', 'FRM_ADMIN_AUTO_LAB_ADD')
</statement>

<statement>
	INSERT INTO [dbo].[SYS_GROUP_PERMISSIONS] ([GROUP_ID], [MODULE_ID]) VALUES ('ADMIN', 'FRM_ADMIN_AUTO_LAB_EDIT')
</statement>

<statement>
	INSERT INTO [dbo].[SYS_GROUP_PERMISSIONS] ([GROUP_ID], [MODULE_ID]) VALUES ('ADMIN', 'FRM_ADMIN_AUTO_LAB_DELETE')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_Line_ID', 'EN', 'Line ID', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_Line_ID', 'NL', 'Line ID', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_Line_ID', 'HU', 'Line ID', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_Line_ID', 'IT', 'Line ID', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_SSCC_Sequence', 'EN', 'SSCC Sequence', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_SSCC_Sequence', 'NL', 'SSCC Sequence', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_SSCC_Sequence', 'HU', 'SSCC Sequence', '')
</statement>

<statement>
INSERT INTO SYS_LANGUAGE (RESOURCE_KEY,LANGUAGE_ID,TEXT,MNEMONIC) VALUES ('lbl_SSCC_Sequence', 'IT', 'SSCC Sequence', '')
</statement>

<statement>
insert into SYS_LANGUAGE (resource_key,language_id,text,mnemonic) values ('mod_FRM_ADMIN_AUTO_LAB_EDIT','EN','Add or Update a Production Line','')
</statement>

<statement>
insert into SYS_LANGUAGE (resource_key,language_id,text,mnemonic) values ('mod_FRM_ADMIN_AUTO_LAB_EDIT','NL','Add or Update a Production Line','')
</statement>

<statement>
insert into SYS_LANGUAGE (resource_key,language_id,text,mnemonic) values ('mod_FRM_ADMIN_AUTO_LAB_EDIT','HU','Add or Update a Production Line','')
</statement>

<statement>
insert into SYS_LANGUAGE (resource_key,language_id,text,mnemonic) values ('mod_FRM_ADMIN_AUTO_LAB_EDIT','IT','Add or Update a Production Line','')
</statement>



</DDL>