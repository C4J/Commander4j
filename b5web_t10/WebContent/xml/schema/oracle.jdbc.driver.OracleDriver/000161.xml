<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE DDL SYSTEM "schema.dtd">
<DDL>

   <statement>        
		CREATE OR REPLACE VIEW "VIEW_WASTE_LOG" AS SELECT
						LOG.TRANSACTION_REF AS TRANSACTION_REF,
						LOG.REPORT_TIME AS REPORT_TIME,
						LOG.WASTE_TRANSACTION_TYPE AS WASTE_TRANSACTION_TYPE,
						TRANS.DESCRIPTION AS DESCRIPTION_TRANSACTION,
						LOG.WASTE_LOCATION_ID AS WASTE_LOCATION_ID,
						LOG.WASTE_CONTAINER_ID AS WASTE_CONTAINER_ID,
						LOCN.DESCRIPTION AS DESCRIPTION_LOCATION,
						LOG.WASTE_MATERIAL_ID AS WASTE_MATERIAL_ID,
						MAT.DESCRIPTION AS DESCRIPTION_MATERIAL,
						MAT.WASTE_TYPE_ID AS WASTE_TYPE_ID,
						TYP.DESCRIPTION AS DESCRIPTION_TYPE,
						TYP.RECYCLABLE AS RECYCLABLE,
						TYP.HAZARDOUS AS HAZARDOUS,
						TYP.PPE_REQUIRED AS PPE_REQUIRED,
						LOCN.REASON_ID_REQUIRED AS REASON_ID_REQUIRED,
						LOG.WASTE_REASON_ID AS WASTE_REASON_ID,
						REAS.DESCRIPTION AS DESCRIPTION_REASON,
						LOCN.PROCESS_ORDER_REQUIRED AS PROCESS_ORDER_REQUIRED,
						LOG.PROCESS_ORDER AS PROCESS_ORDER,
						LOG.USER_ID AS USER_ID,
						LOG.WEIGHT_KG AS WEIGHT_KG,
						LOG.TARE_WEIGHT AS TARE_WEIGHT,
		                DECODE ( TRANS.STORE_AS_NEGATIVE,'N',LOG.WEIGHT_KG - LOG.TARE_WEIGHT,LOG.WEIGHT_KG + LOG.TARE_WEIGHT ) AS NET_WEIGHT,
						MAT.COST_PER_KG AS COST_PER_KG,
						( DECODE ( TRANS.STORE_AS_NEGATIVE, 'N',LOG.WEIGHT_KG - LOG.TARE_WEIGHT,LOG.WEIGHT_KG + LOG.TARE_WEIGHT ) * MAT.COST_PER_KG ) AS COST,
						TRANS.INCLUDE_IN_TOTALS AS INCLUDE_IN_TOTALS 
					FROM
						APP_WASTE_MATERIAL MAT
						INNER JOIN APP_WASTE_LOG LOG ON MAT.WASTE_MATERIAL_ID = LOG.WASTE_MATERIAL_ID
						INNER JOIN APP_WASTE_TYPES TYP ON TYP.WASTE_TYPE_ID = MAT.WASTE_TYPE_ID
						LEFT JOIN APP_WASTE_REASONS REAS ON REAS.WASTE_REASON_ID = LOG.WASTE_REASON_ID
						INNER JOIN APP_WASTE_LOCATIONS LOCN ON LOCN.WASTE_LOCATION_ID = LOG.WASTE_LOCATION_ID
						INNER JOIN APP_WASTE_TRANSACTIONS TRANS ON TRANS.WASTE_TRANSACTION_TYPE = LOG.WASTE_TRANSACTION_TYPE
    </statement>
    
    <statement>
			CREATE OR REPLACE VIEW "VIEW_WASTE_REPORTING2" AS SELECT
				LOG.TRANSACTION_REF AS TRANSACTION_REF,
				LOG.REPORT_TIME AS REPORT_TIME,
				LOG.WASTE_TRANSACTION_TYPE AS WASTE_TRANSACTION_TYPE,
				TRANS.DESCRIPTION AS DESCRIPTION,
				LOG.WASTE_LOCATION_ID AS WASTE_LOCATION_ID,
				LOG.WASTE_CONTAINER_ID AS WASTE_CONTAINER_ID,
				LOCN.DESCRIPTION AS DESCRIPTION_LOCATION,
				LOG.WASTE_MATERIAL_ID AS WASTE_MATERIAL_ID,
				MAT.DESCRIPTION AS DESCRIPTION_MATERIAL,
				MAT.WASTE_TYPE_ID AS WASTE_TYPE_ID,
				TYP.DESCRIPTION AS DESCRIPTION_TYPE,
				TYP.RECYCLABLE AS RECYCLABLE,
				TYP.HAZARDOUS AS HAZARDOUS,
				TYP.PPE_REQUIRED AS PPE_REQUIRED,
				LOG.WASTE_REASON_ID AS WASTE_REASON_ID,
				REAS.DESCRIPTION AS DESCRIPTION_REASON,
				LOG.PROCESS_ORDER AS PROCESS_ORDER,
				LOG.USER_ID AS USER_ID,
				LOG.WEIGHT_KG AS WEIGHT_KG,
				LOG.TARE_WEIGHT AS TARE_WEIGHT,
                DECODE ( TRANS.STORE_AS_NEGATIVE,'N',LOG.WEIGHT_KG - LOG.TARE_WEIGHT,LOG.WEIGHT_KG + LOG.TARE_WEIGHT ) AS NET_WEIGHT,
				MAT.COST_PER_KG AS COST_PER_KG,
				( DECODE ( TRANS.STORE_AS_NEGATIVE, 'N',LOG.WEIGHT_KG - LOG.TARE_WEIGHT,LOG.WEIGHT_KG + LOG.TARE_WEIGHT ) * MAT.COST_PER_KG ) AS COST,
				REPIDS.WASTE_REPORTING_ID AS WASTE_REPORTING_ID,
				REPIDS.DESCRIPTION AS REPORTING_ID_DESCRIPTION,
				REPIDS.REPORTING_GROUP AS REPORTING_GROUP,
				GRP.DESCRIPTION AS GROUP_DESCRIPTION 
			FROM
				APP_WASTE_MATERIAL MAT
				INNER JOIN APP_WASTE_LOG LOG ON MAT.WASTE_MATERIAL_ID = LOG.WASTE_MATERIAL_ID
				INNER JOIN APP_WASTE_TYPES TYP ON TYP.WASTE_TYPE_ID = MAT.WASTE_TYPE_ID
				LEFT JOIN APP_WASTE_REASONS REAS ON REAS.WASTE_REASON_ID = LOG.WASTE_REASON_ID
				INNER JOIN APP_WASTE_LOCATIONS LOCN ON LOCN.WASTE_LOCATION_ID = LOG.WASTE_LOCATION_ID
				INNER JOIN APP_WASTE_LOCATION_REPORTING LOCNREP ON LOCNREP.WASTE_LOCATION_ID = LOG.WASTE_LOCATION_ID
				INNER JOIN APP_WASTE_REPORTING_IDS REPIDS ON REPIDS.WASTE_REPORTING_ID = LOCNREP.WASTE_REPORTING_ID
				INNER JOIN APP_WASTE_TRANSACTIONS TRANS ON TRANS.WASTE_TRANSACTION_TYPE = LOG.WASTE_TRANSACTION_TYPE
				INNER JOIN APP_WASTE_REPORTING_GROUP GRP ON GRP.REPORTING_GROUP = REPIDS.REPORTING_GROUP 
				AND ( TRANS.INCLUDE_IN_TOTALS = 'Y' )	
    </statement>
    

</DDL>
