<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE DDL SYSTEM "schema.dtd">
<DDL>

<statement>
  INSERT INTO "APP_MATERIAL_DATA_IDS" ("DATA_ID", "DESCRIPTION") VALUES ('ALT_TEXT_1', 'Additional Text for Label')
</statement>

<statement>
	CREATE OR REPLACE 
	FUNCTION C4J_GETBASEQUANTITY (XMATERIAL IN VARCHAR2, XPRODUCTION_QUANTITY IN NUMBER, XPRODUCTION_UOM IN VARCHAR2) RETURN DECIMAL AS 
		xbase_uom VARCHAR2 (3);
		xbase_quantity DECIMAL (22, 3);
	BEGIN
		SELECT base_uom INTO xbase_uom FROM	APP_MATERIAL WHERE MATERIAL = XMATERIAL;
		SELECT (XPRODUCTION_QUANTITY * NUMERATOR / DENOMINATOR) INTO xbase_quantity	FROM APP_MATERIAL_UOM WHERE	MATERIAL = XMATERIAL AND UOM = XPRODUCTION_UOM;
	RETURN xbase_quantity;
	END C4J_GETBASEQUANTITY;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION C4J_GETCONTROLVALUE 
	(
	  XNAME IN VARCHAR2  
	) RETURN VARCHAR2 AS 
	    result varchar2(50);
	BEGIN
	  
	  SELECT KEY_VALUE INTO result FROM SYS_CONTROL where SYSTEM_KEY = XNAME;
	
	  RETURN result;
	END C4J_GETCONTROLVALUE;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION C4J_GETDAY (XDATE IN DATE) RETURN VARCHAR2 AS
	  result varchar2(4);
	  dom    int;
	BEGIN
	  result :=CONCAT('00',to_char(XDATE, 'dd'));
	  result := substr(result,LENGTH(result)-1,2);
	  RETURN result;
	END C4J_GETDAY;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION c4j_GetExpiryDate(
	    XPRODUCTION_DATE IN DATE,
	    XSHELF_LIFE IN NUMBER,
	    XSHELF_LIFE_UOM IN VARCHAR2,
	    XSHELF_LIFE_ROUNDING IN VARCHAR2
	) RETURN DATE DETERMINISTIC IS
	    result DATE;
	BEGIN
	    -- Initialize result with production date
	    result := XPRODUCTION_DATE;
	
	    -- Add shelf life based on unit of measure
	    IF XSHELF_LIFE_UOM = 'D' THEN
	        result := result + XSHELF_LIFE;  -- Add days
	    ELSIF XSHELF_LIFE_UOM = 'M' THEN
	        result := ADD_MONTHS(result, XSHELF_LIFE);  -- Add months
	    ELSIF XSHELF_LIFE_UOM = 'Y' THEN
	        result := ADD_MONTHS(result, XSHELF_LIFE * 12);  -- Add years as months
	    END IF;
	
	    -- Apply rounding rules
	    IF XSHELF_LIFE_ROUNDING = '+' THEN
	        result := LAST_DAY(result);  -- Round up to the last day of the month
	    ELSIF XSHELF_LIFE_ROUNDING = '-' THEN
	        result := LAST_DAY(ADD_MONTHS(result, -1)) + 1;  -- Round down to the first day of the month
	    END IF;
	
	    RETURN TRUNC(result);
	END c4j_GetExpiryDate;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION C4J_GETFINALBATCHNUMBER 
	(
	  XPRODUCTION_DATE IN DATE  
	, XOVERRIDE_BATCH IN VARCHAR2  
	, XOVERRIDE_BATCH_NUMBER IN VARCHAR2  
	, XBATCH_OPTIONAL IN VARCHAR2  
	, XPROCESS_ORDER IN VARCHAR2 
	) RETURN VARCHAR2 AS 
	  result        varchar2(40);
	  batchformat   varchar2(50);
	BEGIN
	
		IF (XOVERRIDE_BATCH = 'Y') THEN
	      result := XOVERRIDE_BATCH_NUMBER;
		END IF;
	
		IF XOVERRIDE_BATCH = 'N' THEN
				batchformat := c4j_GetControlValue('BATCH FORMAT');
				result := batchformat;
				result := REPLACE(result,'{PLANT}',c4j_GetPlant());
				result := REPLACE(result,'{PROCESS_ORDER}',XPROCESS_ORDER);
				result := REPLACE(result,'{YEAR4}',c4j_GetYear(XPRODUCTION_DATE,4));
				result := REPLACE(result,'{YEAR2}',c4j_GetYear(XPRODUCTION_DATE,2));
				result := REPLACE(result,'{YEAR1}',c4j_GetYear(XPRODUCTION_DATE,1));
				result := REPLACE(result,'{MONTH}',c4j_GetMonth(XPRODUCTION_DATE));
				result := REPLACE(result,'{DAY}',c4j_GetDay(XPRODUCTION_DATE));
				result := REPLACE(result,'{JULIAN_DAY}',c4j_GetJulian(XPRODUCTION_DATE,1));
				result := REPLACE(result,'{JULIAN0_DAY}',c4j_GetJulian(XPRODUCTION_DATE,0));
				result := REPLACE(result,'{JULIAN1_DAY}',c4j_GetJulian(XPRODUCTION_DATE,1));
		END IF;
	
		result := CONCAT(result,XBATCH_OPTIONAL);
	
	  RETURN result;
	END C4J_GETFINALBATCHNUMBER;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION c4j_GetFinalExpiryDate(
	    XPRODUCTION_DATE IN DATE,
	    XSHELF_LIFE IN INT,
	    XSHELF_LIFE_UOM IN VARCHAR2,
	    XSHELF_LIFE_ROUNDING IN VARCHAR2,
	    XOVERRIDE_EXPIRY IN VARCHAR2,
	    XOVERRIDE_EXPIRY_DATE IN DATE
	) RETURN DATE  AS
	    result DATE;
	BEGIN
	    -- Check if expiry date override is enabled
	    IF XOVERRIDE_EXPIRY = 'Y' THEN
	        result := XOVERRIDE_EXPIRY_DATE;
	    ELSIF XOVERRIDE_EXPIRY = 'N' THEN
	        result := c4j_GetExpiryDate(XPRODUCTION_DATE, XSHELF_LIFE, XSHELF_LIFE_UOM, XSHELF_LIFE_ROUNDING);
	    END IF;
	
	    RETURN result;
	END c4j_GetFinalExpiryDate;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION c4j_GetFullPalletQuantity (XPROCESS_ORDER IN VARCHAR2) RETURN NUMBER IS result NUMBER (22, 3);
	xmaterial VARCHAR2 (40);
	xpal_uom VARCHAR2 (3);
	xpal_numerator NUMBER (22, 3);
	xpal_denominator NUMBER (22, 3);
	xrequired_uom VARCHAR2 (3);
	xrequired_denominator NUMBER (22, 3);
	xrequired_numerator NUMBER (22, 3);
	BEGIN
	-- Get full pallet UOM
	xpal_uom := c4j_GetControlValue ('UOM FULL PALLET QTY');
	
	-- Get required UOM
	SELECT
		REQUIRED_UOM INTO xrequired_uom
	FROM
		APP_PROCESS_ORDER
	WHERE
		PROCESS_ORDER = XPROCESS_ORDER;
		-- Get material from APP_PROCESS_ORDER
	SELECT
		MATERIAL INTO xmaterial
	FROM
		APP_PROCESS_ORDER
	WHERE
		PROCESS_ORDER = XPROCESS_ORDER;
		-- Get required UOM conversion factors
		BEGIN
			SELECT
				DENOMINATOR INTO xrequired_denominator
			FROM
				APP_MATERIAL_UOM
			WHERE
				MATERIAL = xmaterial
				AND UOM = xrequired_uom;
			SELECT
				NUMERATOR INTO xrequired_numerator
			FROM
				APP_MATERIAL_UOM
			WHERE
				MATERIAL = xmaterial
				AND UOM = xrequired_uom;
			SELECT
				DENOMINATOR INTO xpal_denominator
			FROM
				APP_MATERIAL_UOM
			WHERE
				MATERIAL = xmaterial
				AND UOM = xpal_uom;
			SELECT
				NUMERATOR INTO xpal_numerator
			FROM
				APP_MATERIAL_UOM
			WHERE
				MATERIAL = xmaterial
				AND UOM = xpal_uom;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				result := NULL;
				RETURN result;
			END;
			-- Calculate result
			result := (xpal_numerator / xpal_denominator) * (xrequired_denominator / xrequired_numerator);
			RETURN result;
		END c4j_GetFullPalletQuantity;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION C4J_GETJULIAN ( XDATE IN DATE,XOFFSET int  ) RETURN VARCHAR2 AS 
	  result varchar2(9);
	  firstDayofYear date;
	  firstJulianofYear int;
	BEGIN
	
	  firstDayofYear := TRUNC(XDATE,'YEAR');
	  firstJulianofYear := TO_CHAR(firstDayofYear, 'J');
	  result := TO_CHAR(XDATE, 'J') -firstJulianofYear+XOFFSET ;
	  result := lpad(result,3,'0');
	  
	  RETURN result;
	END C4J_GETJULIAN;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION c4j_GetLayers( XPROCESS_ORDER IN VARCHAR2) RETURN NUMBER IS
	    result NUMBER;
	    xlayers_uom VARCHAR2(3);
	    xpallet_uom VARCHAR2(3);
	    xbase_quantity NUMBER(22,3);
	    xmaterial VARCHAR2(20);
	    xproduction_uom VARCHAR2(3);
	    xproduction_quantity NUMBER(22,3);
	BEGIN
	    -- Get full pallet quantity
	    xproduction_quantity := c4j_GetFullPalletQuantity(XPROCESS_ORDER);
	
	    -- Get material from APP_PROCESS_ORDER
	    SELECT MATERIAL INTO xmaterial 
	    FROM APP_PROCESS_ORDER 
	    WHERE PROCESS_ORDER = XPROCESS_ORDER;
	
	    -- Get required UOM
	    SELECT REQUIRED_UOM INTO xproduction_uom 
	    FROM APP_PROCESS_ORDER 
	    WHERE PROCESS_ORDER = XPROCESS_ORDER;
	
	    -- Get base quantity
	    xbase_quantity := c4j_GetBaseQuantity(xmaterial, xproduction_quantity, xproduction_uom);
	
	    -- Get layer UOM
	    xlayers_uom := c4j_GetControlValue('UOM BASE QTY PER LAYER');
	
	    -- Calculate result
	    BEGIN
	        SELECT CEIL(xbase_quantity / NUMERATOR * DENOMINATOR) 
	        INTO result
	        FROM APP_MATERIAL_UOM 
	        WHERE MATERIAL = xmaterial AND UOM = xlayers_uom;
	
	    EXCEPTION 
	        WHEN NO_DATA_FOUND THEN 
	            result := 1;
	    END;
	
	    -- Ensure result is at least 1
	    IF result IS NULL OR result = 0 THEN
	        result := 1;
	    END IF;
	
	    RETURN result;
	END c4j_GetLayers;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION C4J_GETMONTH (XDATE IN DATE) RETURN VARCHAR2 AS
	  result varchar2(4);
	  dom    int;
	BEGIN
	  result :=CONCAT('00',to_char(XDATE, 'mm'));
	  result := substr(result,LENGTH(result)-1,2);
	  RETURN result;
	END C4J_GETMONTH;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION C4J_GETPLANT RETURN VARCHAR2 AS
	  result varchar2(50);
	BEGIN
	  result := C4J_GetControlValue('PLANT');
	  RETURN result;
	END C4J_GETPLANT;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION C4J_GETYEAR (XDATE IN DATE,XSIZE IN INT) RETURN VARCHAR2 AS
	  result varchar2(8);
	  dom    int;
	BEGIN
	  result :=CONCAT('0000',to_char(XDATE, 'yyyy'));
	  result := substr(result,LENGTH(result)+(-1*XSIZE)+1,XSIZE);
	  RETURN result;
	END C4J_GETYEAR;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION GetFullPalletLayers (p_Material IN VARCHAR2, p_Production_UOM IN VARCHAR2) RETURN decimal IS 
	v_Pallet_UOM VARCHAR2(3) := 'PAL';
	v_Base_UOM VARCHAR2(3);
	v_Full_Pallet_Quantity decimal (22, 3);
	v_Layers decimal;
	BEGIN
	
	SELECT BASE_UOM 
	    INTO v_Base_UOM 
	    FROM APP_MATERIAL 
	    WHERE MATERIAL = p_Material;
			
	    SELECT NUMERATOR 
	    INTO v_Full_Pallet_Quantity 
	    FROM APP_MATERIAL_UOM 
	    WHERE MATERIAL = p_Material 
	    AND UOM = v_Pallet_UOM;
			
			  v_Layers := GetLayers(p_Material, v_Full_Pallet_Quantity, v_Base_UOM);
	
		RETURN v_Layers;
		END GetFullPalletLayers;
</statement>

<statement>
	CREATE OR REPLACE FUNCTION GetLayers(
	    p_Material IN VARCHAR2,
	    p_Production_Quantity IN DECIMAL,
	    p_Production_UOM IN VARCHAR2
	) RETURN DECIMAL IS
	    v_Layers_UOM VARCHAR2(3) := 'LAG';
	    v_Base_Quantity DECIMAL(22,3);
	    v_Layers DECIMAL;
	BEGIN
	    -- Calculate base quantity using the equivalent function
	    v_Base_Quantity := c4j_GetBaseQuantity(p_Material, p_Production_Quantity, p_Production_UOM);
	
	    -- Compute layers
	    SELECT NVL(v_Base_Quantity / NUMERATOR * DENOMINATOR, 1)
	    INTO v_Layers
	    FROM APP_MATERIAL_UOM
	    WHERE MATERIAL = p_Material AND UOM = v_Layers_UOM;
	
	    -- Ensure minimum value rules are followed
	    IF v_Layers = 0 THEN
	        v_Layers := 1;
	    END IF;
	
	    IF p_Production_Quantity = 0 THEN
	        v_Layers := 0;
	    END IF;
	
	    RETURN v_Layers;
	EXCEPTION
	    WHEN NO_DATA_FOUND THEN
	        RETURN 1; -- Default to 1 if no data is found
	    WHEN OTHERS THEN
	        RETURN NULL; -- Handle unexpected errors
	END GetLayers;
</statement>

<statement>ALTER FUNCTION C4J_GETBASEQUANTITY COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETCONTROLVALUE COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETDAY COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETEXPIRYDATE COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETFINALBATCHNUMBER COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETFINALEXPIRYDATE COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETFULLPALLETQUANTITY COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETJULIAN COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETLAYERS COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETMONTH COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETPLANT COMPILE</statement>
<statement>ALTER FUNCTION C4J_GETYEAR COMPILE</statement>
<statement>ALTER FUNCTION GetFullPalletLayers COMPILE</statement>
<statement>ALTER FUNCTION GetLayers COMPILE</statement>

<statement>
CREATE OR REPLACE VIEW "VIEW_AUTO_LABELLER_FULL" AS (SELECT
  PO.PROCESS_ORDER,
  PO.STATUS,
  PO.MATERIAL,
  PO.REQUIRED_UOM,
  MAT.MATERIAL_TYPE,
  MAT.DESCRIPTION,
  MATUOM.EAN,
  MATUOM.VARIANT,
  MAT.OLD_MATERIAL,
  MAT.SHELF_LIFE,
  MAT.SHELF_LIFE_UOM,
  MAT.SHELF_LIFE_RULE,
  PO.CUSTOMER_ID,
  CUST.CUSTOMER_NAME,
  MAT.UPDATED AS MATERIAL_UPDATED,
  PO.UPDATED AS PROCESS_ORDER_UPDATED,
  c4j_GetFinalBatchNumber (SYSDATE, 'N', '', '', PO.PROCESS_ORDER) AS BATCH_NUMBER,
  c4j_GetFinalExpiryDate (SYSDATE, MAT.SHELF_LIFE, MAT.SHELF_LIFE_UOM, MAT.SHELF_LIFE_RULE, 'N', SYSDATE) AS EXPIRY_DATE,
  c4j_GetLayers (PO.PROCESS_ORDER) AS DEFAULT_LAYERS,
  c4j_GetFullPalletQuantity (PO.PROCESS_ORDER) AS DEFAULT_QUANTITY,
  CUSTDATA1.DATA AS PART_NO,
  CUSTDATA2.DATA AS ALT_TEXT_1
FROM
  APP_PROCESS_ORDER PO
  LEFT JOIN APP_MATERIAL_UOM MATUOM ON PO.MATERIAL = MATUOM.MATERIAL AND PO.REQUIRED_UOM = MATUOM.UOM
  LEFT JOIN APP_CUSTOMER CUST ON PO.CUSTOMER_ID = CUST.CUSTOMER_ID
  LEFT JOIN APP_MATERIAL MAT ON PO.MATERIAL = MAT.MATERIAL 
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA1 ON PO.MATERIAL = CUSTDATA1.MATERIAL AND PO.CUSTOMER_ID = CUSTDATA1.CUSTOMER_ID AND CUSTDATA1.DATA_ID = 'PART_NO'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA2 ON PO.MATERIAL = CUSTDATA2.MATERIAL AND PO.CUSTOMER_ID = CUSTDATA2.CUSTOMER_ID AND CUSTDATA2.DATA_ID = 'ALT_TEXT_1')
 </statement>
      
<statement>                                   
CREATE OR REPLACE VIEW "VIEW_AUTO_LABELLER_PRINTER" AS (SELECT
  AUTOLAB.LINE,
  AUTOLAB.MODIFIED,
  AUTOLAB.UNIQUE_ID,
  LABDATA.LABEL_TYPE,
  MEMBER.PRINTER_ID,
  PRINTERS.ENABLED,
  PRINTERS.PRINTER_TYPE,
  PRINTERS.IP_ADDRESS,
  PRINTERS.PORT,
  PRINTERS.GROUP_ID,
  PRINTERS.LANGUAGE,
  PRINTERS.PRINTER_DPI,
  LABDATA.PROCESS_ORDER,
  LABDATA.MATERIAL,
  LABDATA.MATERIAL_TYPE,
  MAT.DESCRIPTION AS MATERIAL_DESCRIPTION,
  MAT.SHELF_LIFE_UOM,
  MAT.SHELF_LIFE,
  MAT.SHELF_LIFE_RULE,
  LABDATA.BATCH_NUMBER,
  LABDATA.REQUIRED_RESOURCE,
  (SELECT KEY_VALUE FROM SYS_CONTROL WHERE (SYSTEM_KEY = 'PLANT')) AS PLANT,
  LABDATA.LOCATION_ID,
  LABDATA.DATE_OF_MANUFACTURE,
  LABDATA.EXPIRY_DATE,
  LABDATA.PROD_EAN,
  LABDATA.PROD_VARIANT,
  LABDATA.PROD_QUANTITY,
  LABDATA.PROD_UOM,
  LABDATA.BASE_EAN,
  LABDATA.BASE_VARIANT,
  LABDATA.BASE_QUANTITY,
  LABDATA.BASE_UOM,
  LABDATA.CUSTOMER_ID,
  CUST.CUSTOMER_NAME,
  LABDATA.PRINT_COPIES,
  LABDATA.MODULE_ID,
  LABDATA.OVERRIDE_MANUFACTURE_DATE,
  LABDATA.OVERRIDE_EXPIRY_DATE,
  LABDATA.OVERRIDE_BATCH_PREFIX,
  LABDATA.BATCH_PREFIX,
  LABDATA.BATCH_SUFFIX,
  MOD.REPORT_TYPE,
  MOD.MODULE_TYPE,
  MOD.REPORT_FILENAME,
  CUSTDATA1.DATA AS PART_NO,
  LABDATA.LAYERS,
  CUSTDATA2.DATA AS ALT_TEXT_1
FROM
  APP_AUTO_LABELLER AUTOLAB
  LEFT JOIN SYS_PRINTER_LINE_MEMBERSHIP MEMBER ON AUTOLAB.LINE = MEMBER.LINE AND AUTOLAB.GROUP_ID = MEMBER.GROUP_ID
  LEFT JOIN SYS_PRINTERS PRINTERS ON MEMBER.PRINTER_ID = PRINTERS.PRINTER_ID AND MEMBER.GROUP_ID = PRINTERS.GROUP_ID
  RIGHT JOIN APP_LABEL_DATA LABDATA ON LABDATA.UNIQUE_ID = AUTOLAB.UNIQUE_ID
  LEFT JOIN APP_MATERIAL MAT ON MAT.MATERIAL = LABDATA.MATERIAL
  LEFT JOIN APP_CUSTOMER CUST ON LABDATA.CUSTOMER_ID = CUST.CUSTOMER_ID
  LEFT JOIN SYS_MODULES MOD ON LABDATA.MODULE_ID = MOD.MODULE_ID 
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA1 ON LABDATA.MATERIAL = CUSTDATA1.MATERIAL AND LABDATA.CUSTOMER_ID = CUSTDATA1.CUSTOMER_ID AND CUSTDATA1.DATA_ID = 'PART_NO'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA2 ON LABDATA.MATERIAL = CUSTDATA2.MATERIAL AND LABDATA.CUSTOMER_ID = CUSTDATA2.CUSTOMER_ID AND CUSTDATA2.DATA_ID = 'ALT_TEXT_1'
WHERE
  (PRINTERS.ENABLED = 'Y'))
 </statement>
 
<statement>        
CREATE OR REPLACE VIEW "VIEW_LABEL_DATA" AS (SELECT
  LABDATA.UNIQUE_ID,
  LABDATA.PRINT_DATE,
  LABDATA.USER_ID,
  LABDATA.WORKSTATION_ID,
  LABDATA.MATERIAL,
  LABDATA.MATERIAL_TYPE,
  LABDATA.BATCH_NUMBER,
  LABDATA.PROCESS_ORDER,
  LABDATA.REQUIRED_RESOURCE,
  LABDATA.LOCATION_ID,
  LABDATA.PROD_QUANTITY,
  LABDATA.PROD_UOM,
  LABDATA.DATE_OF_MANUFACTURE,
  LABDATA.EXPIRY_DATE,
  LABDATA.EXPIRY_MODE,
  LABDATA.PROD_EAN,
  LABDATA.PROD_VARIANT,
  LABDATA.CUSTOMER_ID,
  LABDATA.PRINT_COPIES,
  LABDATA.PRINT_QUEUE_NAME,
  LABDATA.BASE_EAN,
  LABDATA.BASE_VARIANT,
  LABDATA.BASE_QUANTITY,
  LABDATA.BASE_UOM,
  LABDATA.MODULE_ID,
  LABDATA.OVERRIDE_MANUFACTURE_DATE,
  LABDATA.OVERRIDE_EXPIRY_DATE,
  LABDATA.OVERRIDE_BATCH_PREFIX,
  LABDATA.BATCH_PREFIX,
  LABDATA.BATCH_SUFFIX,
  LABDATA.LABEL_TYPE,
  LABDATA.LINE,
  CUST.CUSTOMER_NAME,
  MAT.DESCRIPTION AS MATERIAL_DESCRIPTION,
  CUSTDATA1.DATA AS PART_NO,
  CUSTDATA2.DATA AS ALT_TEXT_1
FROM
  APP_LABEL_DATA LABDATA
  LEFT JOIN APP_CUSTOMER CUST ON LABDATA.CUSTOMER_ID = CUST.CUSTOMER_ID
  LEFT JOIN APP_MATERIAL MAT ON LABDATA.MATERIAL = MAT.MATERIAL
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA1 ON LABDATA.MATERIAL = CUSTDATA1.MATERIAL AND LABDATA.CUSTOMER_ID = CUSTDATA1.CUSTOMER_ID   AND CUSTDATA1.DATA_ID = 'PART_NO'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA2 ON LABDATA.MATERIAL = CUSTDATA2.MATERIAL AND LABDATA.CUSTOMER_ID = CUSTDATA2.CUSTOMER_ID   AND CUSTDATA2.DATA_ID = 'ALT_TEXT_1')
</statement>

<statement>    
CREATE OR REPLACE VIEW "VIEW_LABEL_DATA_PROCESS_ORDER" AS (SELECT
  PO.PROCESS_ORDER,
  PO.STATUS,
  PO.MATERIAL,
  PO.REQUIRED_UOM,
  PO.REQUIRED_RESOURCE,
  PO.DUE_DATE,
  MAT.MATERIAL_TYPE,
  MAT.DESCRIPTION,
  LPAD(MATUOM_PROD.EAN,14,'0') AS PROD_EAN,
  LPAD(MATUOM_PROD.VARIANT,2,'0') AS PROD_VARIANT,
  MATUOM_BASE.NUMERATOR AS PROD_QUANTITY,
  LPAD(MATUOM_BASE.EAN,14,'0') AS BASE_EAN,
  LPAD(MATUOM_BASE.VARIANT,2,'0') AS BASE_VARIANT,
  MATUOM_PROD.NUMERATOR AS BASE_QUANTITY,
  c4j_GetFullPalletQuantity(PO.PROCESS_ORDER) AS PALLET_QUANTITY, 
  c4j_GetLayers(PO.PROCESS_ORDER) AS PALLET_LAYERS,
  MAT.OLD_MATERIAL,
  MAT.SHELF_LIFE,
  MAT.SHELF_LIFE_UOM,
  MAT.SHELF_LIFE_RULE,
  PO.CUSTOMER_ID,
  CUST.CUSTOMER_NAME,
  SUBSTR(C4J_GETFINALBATCHNUMBER(sysdate,'N','','',po.PROCESS_ORDER),1,20) AS BATCH_NUMBER,
  c4j_GetFinalExpiryDate(sysdate,MAT.SHELF_LIFE,MAT.SHELF_LIFE_UOM,MAT.SHELF_LIFE_RULE,'N',SYSDATE) AS EXPIRY_DATE,
  MAT.UPDATED AS MATERIAL_UPDATED,
  PO.UPDATED AS PROCESS_ORDER_UPDATED,
  CUSTDATA1.DATA AS PART_NO,
  NVL(CUST.CUSTOMER_DATA_01, '') AS CASE__LABEL,
  NVL(CUST.CUSTOMER_DATA_02, '') AS PALLET__LABEL,
  CUST.UPDATED AS CUSTOMER_UPDATED,
  CUSTDATA2.DATA AS ALT_TEXT_1
FROM
  APP_PROCESS_ORDER PO
  LEFT JOIN APP_MATERIAL MAT ON MAT.MATERIAL = PO.MATERIAL
  LEFT JOIN APP_CUSTOMER CUST ON CUST.CUSTOMER_ID = PO.CUSTOMER_ID
  LEFT JOIN APP_MATERIAL_UOM MATUOM_PROD ON MATUOM_PROD.MATERIAL = PO.MATERIAL AND MATUOM_PROD.UOM = PO.REQUIRED_UOM
  LEFT JOIN APP_MATERIAL_UOM MATUOM_BASE ON MATUOM_BASE.MATERIAL = PO.MATERIAL AND MATUOM_BASE.UOM = MAT.BASE_UOM   AND MATUOM_BASE.UOM = MAT.BASE_UOM
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA1 ON PO.MATERIAL = CUSTDATA1.MATERIAL AND PO.CUSTOMER_ID = CUSTDATA1.CUSTOMER_ID  AND CUSTDATA1.DATA_ID = 'PART_NO'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA2 ON PO.MATERIAL = CUSTDATA2.MATERIAL AND PO.CUSTOMER_ID = CUSTDATA2.CUSTOMER_ID  AND CUSTDATA2.DATA_ID = 'ALT_TEXT_1')
</statement>

<statement>
CREATE OR REPLACE VIEW "VIEW_LABEL_DATA_PROCESS_ORDER_CDF" AS (SELECT
  PO.PROCESS_ORDER,
  PO.STATUS,
  PO.MATERIAL,
  PO.REQUIRED_UOM,
  PO.REQUIRED_RESOURCE,
  PO.DUE_DATE,
  MAT.MATERIAL_TYPE,
  MAT.DESCRIPTION,
  LPAD(MATUOM_PROD.EAN,14,'0') AS PROD_EAN,
  LPAD(MATUOM_PROD.VARIANT,2,'0') AS PROD_VARIANT,
  MATUOM_BASE.NUMERATOR AS PROD_QUANTITY,
  LPAD(MATUOM_BASE.EAN,14,'0') AS BASE_EAN,
  LPAD(MATUOM_BASE.VARIANT,2,'0') AS BASE_VARIANT,
  NVL(PART3.DATA, 0) AS BASE_QUANTITY,
  c4j_GetFullPalletQuantity(PO.PROCESS_ORDER) AS PALLET_QUANTITY, 
  c4j_GetLayers(PO.PROCESS_ORDER) AS PALLET_LAYERS,
  MAT.OLD_MATERIAL,
  MAT.SHELF_LIFE,
  MAT.SHELF_LIFE_UOM,
  MAT.SHELF_LIFE_RULE,
  PO.CUSTOMER_ID,
  CUST.CUSTOMER_NAME,
  SUBSTR(C4J_GETFINALBATCHNUMBER(sysdate,'N','','',po.PROCESS_ORDER),1,20) AS BATCH_NUMBER,
  c4j_GetFinalExpiryDate(sysdate,MAT.SHELF_LIFE,MAT.SHELF_LIFE_UOM,MAT.SHELF_LIFE_RULE,'',SYSDATE) AS EXPIRY_DATE,
  MAT.UPDATED AS MATERIAL_UPDATED,
  PO.UPDATED AS PROCESS_ORDER_UPDATED,
  NVL(PART1.DATA, '') AS PART_NO,
  NVL(PART0.DATA, '') AS CASE_CONTENT,
  NVL(CUST.CUSTOMER_DATA_01, '') AS CASE__LABEL,
  NVL(CUST.CUSTOMER_DATA_02, '') AS PALLET__LABEL,
  CUST.UPDATED AS CUSTOMER_UPDATED,
  NVL(PART5.DATA, '') AS ALT_TEXT_1
FROM
  APP_PROCESS_ORDER PO
  LEFT JOIN APP_MATERIAL MAT ON MAT.MATERIAL = PO.MATERIAL
  LEFT JOIN APP_CUSTOMER CUST ON CUST.CUSTOMER_ID = PO.CUSTOMER_ID
  LEFT JOIN APP_MATERIAL_UOM MATUOM_PROD ON MATUOM_PROD.MATERIAL = PO.MATERIAL AND MATUOM_PROD.UOM = PO.REQUIRED_UOM
  LEFT JOIN APP_MATERIAL_UOM MATUOM_BASE ON MATUOM_BASE.MATERIAL = PO.MATERIAL AND MATUOM_BASE.UOM = MAT.BASE_UOM
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA PART3 ON PO.MATERIAL = PART3.MATERIAL AND PO.CUSTOMER_ID = PART3.CUSTOMER_ID AND PART3.DATA_ID = 'CU_QUANTITY'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA PART2 ON PO.MATERIAL = PART2.MATERIAL AND PO.CUSTOMER_ID = PART2.CUSTOMER_ID AND PART2.DATA_ID = 'CU_EAN'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA PART4 ON PO.MATERIAL = PART4.MATERIAL AND PO.CUSTOMER_ID = PART4.CUSTOMER_ID AND PART4.DATA_ID = 'CU_VARIANT'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA PART1 ON PO.MATERIAL = PART1.MATERIAL AND PO.CUSTOMER_ID = PART1.CUSTOMER_ID AND PART1.DATA_ID = 'PART_NO'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA PART0 ON PO.MATERIAL = PART0.MATERIAL AND PO.CUSTOMER_ID = PART0.CUSTOMER_ID AND PART0.DATA_ID = 'CASE_CONTENT'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA PART5 ON PO.MATERIAL = PART5.MATERIAL AND PO.CUSTOMER_ID = PART5.CUSTOMER_ID AND PART5.DATA_ID = 'ALT_TEXT_1')
</statement>

<statement>
CREATE OR REPLACE VIEW "VIEW_LABELLER_PROCESS_ORDER_INFO" AS (SELECT
  PO.PROCESS_ORDER,
  PO.MATERIAL,
  PO.STATUS,
  PO.DUE_DATE,
  MAT.DESCRIPTION,
  MAT.SHELF_LIFE,
  MAT.SHELF_LIFE_UOM,
  MAT.SHELF_LIFE_RULE,
  PO.REQUIRED_UOM,
  MATUOM.EAN,
  MATUOM.VARIANT,
  MAT.OLD_MATERIAL,
  GetFullPalletLayers (PO.MATERIAL, PO.REQUIRED_UOM) AS DEFAULT_LAYERS,
  c4j_GetFullPalletQuantity(PO.PROCESS_ORDER) AS DEFAULT_QUANTITY, 
  PO.UPDATED AS PROCESS_ORDER_UPDATED,
  MAT.UPDATED AS MATERIAL_UPDATED,
  CUST.CUSTOMER_NAME,
  CUSTDATA1.DATA AS PART_NO,
  NVL(CUST.CUSTOMER_DATA_01, '') AS CASE__LABEL,
  NVL(CUST.CUSTOMER_DATA_02, '') AS PALLET__LABEL,
  CUST.UPDATED AS CUSTOMER_UPDATED,
  CUSTDATA2.DATA AS ALT_TEXT_1
FROM
  APP_PROCESS_ORDER PO
  LEFT JOIN APP_CUSTOMER CUST ON PO.CUSTOMER_ID = CUST.CUSTOMER_ID
  LEFT JOIN APP_MATERIAL MAT ON PO.MATERIAL = MAT.MATERIAL
  LEFT JOIN APP_MATERIAL_UOM MATUOM ON PO.MATERIAL = MATUOM.MATERIAL AND PO.REQUIRED_UOM = MATUOM.UOM
  LEFT JOIN APP_MATERIAL_UOM  MATUOMFULL ON PO.MATERIAL = MATUOMFULL.MATERIAL
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA1 ON PO.MATERIAL = CUSTDATA1.MATERIAL AND PO.CUSTOMER_ID = CUSTDATA1.CUSTOMER_ID AND CUSTDATA1.DATA_ID = 'PART_NO'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA2 ON PO.MATERIAL = CUSTDATA2.MATERIAL AND PO.CUSTOMER_ID = CUSTDATA2.CUSTOMER_ID AND CUSTDATA2.DATA_ID = 'ALT_TEXT_1'
WHERE
  (MATUOMFULL.UOM = 'PAL'))
  </statement>
    
<statement>
CREATE OR REPLACE VIEW "VIEW_PALLET_EXPIRY" AS (SELECT 
  PALLET.SSCC,
  PALLET.LOCATION_ID,
  PALLET.MATERIAL,
  PALLET.BATCH_NUMBER,
  PALLET.PROCESS_ORDER,
  PALLET.QUANTITY,
  PALLET.UOM,
  PALLET.DATE_OF_MANUFACTURE,
  PALLET.STATUS,
  PALLET.EAN,
  PALLET.VARIANT,
  PALLET.DESPATCH_NO,
  PALLET.CONFIRMED,
  PALLET.LAYERS,
  PALLET.SSCC_EXPIRY_DATE,
  PALLET.CUSTOMER_ID,
  PALLET.MHN_NUMBER,
  PALLET.DECISION,
  BATCH.EXPIRY_DATE,
  MAT.DESCRIPTION,
  MAT.OLD_MATERIAL,
  CUST.CUSTOMER_NAME,
  CUST.PRINT_ON_LABEL,
  PALLET.DATE_CREATED,
  PALLET.CREATED_BY_USER_ID,
  PALLET.DATE_UPDATED,
  PALLET.UPDATED_BY_USER_ID,
  PALLET.EQUIPMENT_TYPE,
  MAT.GROSS_WEIGHT,
  MAT.NET_WEIGHT,
  MAT.WEIGHT_UOM,
  CUSTDATA1.DATA PART_NO,
  CUSTDATA2.DATA CASE_CONTENT,
  ORD.REQUIRED_RESOURCE REQUIRED_RESOURCE,
  UNIT2.EAN BASE_EAN,
  UNIT2.VARIANT BASE_VARIANT,
  MAT.BASE_UOM BASE_UOM,
  ((PALLET.QUANTITY * UNIT1.NUMERATOR) / UNIT1.DENOMINATOR) BASE_QUANTITY,
  CUSTDATA3.DATA ALT_TEXT_1
FROM
  APP_PALLET PALLET
  LEFT JOIN APP_MATERIAL_BATCH BATCH ON PALLET.MATERIAL = BATCH.MATERIAL AND PALLET.BATCH_NUMBER = BATCH.BATCH_NUMBER
  LEFT JOIN APP_MATERIAL MAT ON PALLET.MATERIAL = MAT.MATERIAL  
  LEFT JOIN APP_CUSTOMER CUST ON PALLET.CUSTOMER_ID = CUST.CUSTOMER_ID
  LEFT JOIN APP_PROCESS_ORDER ORD ON PALLET.PROCESS_ORDER = ORD.PROCESS_ORDER
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA1 ON CUSTDATA1.MATERIAL = PALLET.MATERIAL AND CUSTDATA1.CUSTOMER_ID = PALLET.CUSTOMER_ID AND CUSTDATA1.DATA_ID = 'PART_NO'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA2 ON CUSTDATA2.MATERIAL = PALLET.MATERIAL AND CUSTDATA2.CUSTOMER_ID = PALLET.CUSTOMER_ID AND CUSTDATA2.DATA_ID = 'CASE_CONTENT'
  LEFT JOIN APP_MATERIAL_CUSTOMER_DATA CUSTDATA3 ON CUSTDATA3.MATERIAL = PALLET.MATERIAL AND CUSTDATA3.CUSTOMER_ID = PALLET.CUSTOMER_ID AND CUSTDATA3.DATA_ID = 'ALT_TEXT_1'
  LEFT JOIN APP_MATERIAL_UOM UNIT1 ON PALLET.UOM = UNIT1.UOM AND PALLET.MATERIAL = UNIT1.MATERIAL
  LEFT JOIN APP_MATERIAL_UOM UNIT2 ON MAT.MATERIAL = UNIT2.MATERIAL AND MAT.BASE_UOM = UNIT2.UOM)
 </statement>
  
<statement>ALTER VIEW VIEW_APP_WEIGHT_SAMPLE_POINT COMPILE</statement>
<statement>ALTER VIEW VIEW_AUTO_LABELLER_FULL COMPILE</statement>
<statement>ALTER VIEW VIEW_AUTO_LABELLER_PRINTER COMPILE</statement>
<statement>ALTER VIEW VIEW_BARCODE_VALIDATE COMPILE</statement>
<statement>ALTER VIEW VIEW_BOM COMPILE</statement>
<statement>ALTER VIEW VIEW_BOM_STRUCTURE COMPILE</statement>
<statement>ALTER VIEW VIEW_JOURNEYS COMPILE</statement>
<statement>ALTER VIEW VIEW_LABEL_DATA COMPILE</statement>
<statement>ALTER VIEW VIEW_LABEL_DATA_PROCESS_ORDER COMPILE</statement>
<statement>ALTER VIEW VIEW_PALLET_EXPIRY COMPILE</statement>
<statement>ALTER VIEW VIEW_PALLET_HISTORY COMPILE</statement>
<statement>ALTER VIEW VIEW_PALLET_HISTORY_EXPIRY COMPILE</statement>
<statement>ALTER VIEW VIEW_PALLET_SAMPLES COMPILE</statement>
<statement>ALTER VIEW VIEW_PERMISSIONS COMPILE</statement>
<statement>ALTER VIEW VIEW_PLANTS COMPILE</statement>
<statement>ALTER VIEW VIEW_PROCESS_ORDER COMPILE</statement>
<statement>ALTER VIEW VIEW_PROCESS_ORDER_RESOURCE COMPILE</statement>
<statement>ALTER VIEW VIEW_PRODUCT_GROUP COMPILE</statement>
<statement>ALTER VIEW VIEW_QM_ANALYSIS_01 COMPILE</statement>
<statement>ALTER VIEW VIEW_QM_PANEL_RESULTS COMPILE</statement>
<statement>ALTER VIEW VIEW_QM_RESULTS COMPILE</statement>
<statement>ALTER VIEW VIEW_SAMPLE_POINT_GROUPS COMPILE</statement>
<statement>ALTER VIEW VIEW_SAMPLE_POINT_LOCATIONS COMPILE</statement>
<statement>ALTER VIEW VIEW_SELECTLIST_FILLER COMPILE</statement>
<statement>ALTER VIEW VIEW_SELECTLIST_ZWSIPANE COMPILE</statement>
<statement>ALTER VIEW VIEW_SORTING_DATA COMPILE</statement>
<statement>ALTER VIEW VIEW_SORTING_QTY_DIFFS COMPILE</statement>
<statement>ALTER VIEW VIEW_SYNC1 COMPILE</statement>
<statement>ALTER VIEW VIEW_SYNC2 COMPILE</statement>
<statement>ALTER VIEW VIEW_SYNC3A COMPILE</statement>
<statement>ALTER VIEW VIEW_SYNC3B COMPILE</statement>
<statement>ALTER VIEW VIEW_SYNC4A COMPILE</statement>
<statement>ALTER VIEW VIEW_SYNC4B COMPILE</statement>
<statement>ALTER VIEW VIEW_WASTE_LOCATION_MATERIALS COMPILE</statement>
<statement>ALTER VIEW VIEW_WASTE_LOG COMPILE</statement>
<statement>ALTER VIEW VIEW_WASTE_REPORTING COMPILE</statement>
<statement>ALTER VIEW VIEW_WASTE_REPORTING2 COMPILE</statement>
<statement>ALTER VIEW VIEW_WEIGHT_SAMPLES COMPILE</statement>
<statement>ALTER VIEW VIEW_WEIGHT_SAMPLES2 COMPILE</statement>
<statement>ALTER VIEW VIEW_WEIGHT_SAMPLES3 COMPILE</statement>
<statement>ALTER VIEW VIEW_WEIGHT_SAMPLES4 COMPILE</statement>
<statement>ALTER VIEW VIEW_WEIGHT_SAMPLES5 COMPILE</statement>


  		
</DDL>
